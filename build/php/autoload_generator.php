<?php

namespace Qero\Packages;

use Qero\Packages\Package;
use function Qero\color;

use const Qero\{
    QERO_DIR,
    PROGRESS_CHAR,
    PROGRESS_SUBCHAR
};

class AutoloadGenerator
{
    public static function generate (Package $package)
    {
        $autoload = "<?php\n\n/**\n * This file is @generated by Qero\n * Date: ". date ('Y/m/d H:i:s') ." UTC (timestamp: ". time () .")\n */\n\n";
        $requires = '';
        $classes  = '';

        $packages = self::getRequiresTree ($package->requires);
        
        echo PHP_EOL;

        $progressBar = new \ProgressBar\ProgressBar ($size = sizeof ($packages), 30, function ($position) use ($packages)
        {
            return isset ($packages[$position]) ?
                color ('Building [yellow]'. str_replace (
                    '@', '[reset]@', $packages[$position]) .'[reset] ') :
                'Building ';
        }, null, PROGRESS_CHAR);

        $i = 0;

        foreach ($packages as $pkg)
        {
            $pkg = (new Package ($pkg))->load ();
            
            if ($pkg->entry_point === null)
                foreach (self::getPHPClasses (QERO_DIR .'/qero-packages/'. $pkg->name) as $pathFile => $fileClasses)
                    foreach ($fileClasses as $class)
                        $classes .= "'$class' => '". $pkg->name ."/$pathFile',\n\t";

            else $requires .= 'require \''. $pkg->name .'/'. $pkg->entry_point ."';\n";

            $progressBar->update (++$i);
        }

        if ($size == 0)
        {
            $progressBar->clear ();
        
            echo color (' [yellow]*[reset] No one package installed');
        }

        echo PHP_EOL;

        $autoload .= $requires . ($classes ? '

$classes = [
    '. (substr ($classes, -3) == ",\n\t" ? substr ($classes, 0, -3) : $classes) .'
];

spl_autoload_register (function ($class) use ($classes)
{
    if (isset ($classes[$class]))
        include __DIR__ .\'/\'. $classes[$class];
});' : '');

        if (!file_exists (QERO_DIR .'/qero-packages'))
            mkdir (QERO_DIR .'/qero-packages', 0777, true);

        file_put_contents (QERO_DIR .'/qero-packages/autoload.php', $autoload ."\n\n\$required_packages = ". ($size > 0 ? "[\n\t[". implode ("],\n\t[", array_map (function ($package)
        {
            $package = new Package ($package);
            
            return "'". $package->name ."', ". ($package->version !== null ?
                '\''. $package->version .'\'' : 'null');
        }, $packages)) ."]\n];" : 'null;') ."\n");
    }

    public static function getRequiresTree (array $packages, array $used = []): array
    {
        $stack = [];

        foreach ($packages as $package)
        {
            $used[]  = $package;
            $package = (new Package ($package))->load ();

            if ($package->requires && sizeof ($package->requires) > 0)
                $stack = array_unique (array_merge ($stack, self::getRequiresTree (array_diff ($package->requires, $used), $used)));

            if (!in_array ($package->toString (), $stack))
                $stack[] = $package->toString ();
        }

        return $stack;
    }

    public static function getPhpsList (string $folder, $basefolder = null)
    {
        $list = [];

        if ($basefolder === null)
            $basefolder = $folder .'/';

        foreach (array_slice (scandir ($folder), 2) as $file)
        {
            $ext = explode ('.', $file);

            if (strtolower (end ($ext)) == 'php' && strpos ($file, '.') !== false)
                $list[] = str_replace ($basefolder, '', $folder .'/'. $file);

            elseif (is_dir ($folder .'/'. $file))
                $list = array_merge ($list, self::getPhpsList ($folder .'/'. $file, $basefolder));
        }

        return $list;
    }

    public static function getPHPClasses ($file)
    {
        if (is_dir ($file))
        {
            $classes = [];

            foreach (self::getPhpsList ($file) as $path)
                $classes[$path] = self::getPHPClasses ($file .'/'. $path);

            return $classes;
        }

        else
        {
            $contents = @php_strip_whitespace ($file);

            if (!preg_match ('{\b(?:class|interface'. (PHP_VERSION_ID < 50400 ? '' : '|trait') .')\s}i', $contents))
                return [];

            $contents = preg_replace ('{<<<\s*(\'?)(\w+)\\1(?:\r\n|\n|\r)(?:.*?)(?:\r\n|\n|\r)\\2(?=\r\n|\n|\r|;)}s', 'null', $contents);
            $contents = preg_replace ('{"[^"\\\\]*+(\\\\.[^"\\\\]*+)*+"|\'[^\'\\\\]*+(\\\\.[^\'\\\\]*+)*+\'}s', 'null', $contents);

            if (substr ($contents, 0, 2) != '<?')
            {
                $contents = preg_replace ('{^.+?<\?}s', '<?', $contents, 1, $replacements);

                if ($replacements === 0)
                    return [];
            }

            $contents = preg_replace ('{\?>.+<\?}s', '?><?', $contents);
            $pos      = strrpos ($contents, '?>');

            if ($pos !== false && strpos (substr ($contents, $pos), '<?') === false)
                $contents = substr ($contents, 0, $pos);

            if (preg_match ('{(<\?)(?!(php))}i', $contents))
                $contents = preg_replace ('{//.* | /\*(?:[^*]++|\*(?!/))*\*/}x', '', $contents);

            preg_match_all ('{(?:\b(?<![\$:>])(?P<type>class|interface'. (PHP_VERSION_ID < 50400 ? '' : '|trait') .') \s++ (?P<name>[a-zA-Z_\x7f-\xff:][a-zA-Z0-9_\x7f-\xff:\-]*+)| \b(?<![\$:>])(?P<ns>namespace) (?P<nsname>\s++[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+(?:\s*+\\\\\s*+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+)*+)? \s*+ [\{;])}ix', $contents, $matches);

            $classes   = [];
            $namespace = '';

            for ($i = 0, $len = sizeof ($matches['type']); $i < $len; $i++)
            {
                if (!empty ($matches['ns'][$i]))
                    $namespace = str_replace (array (
                        ' ', "\t", "\r", "\n"
                    ), '', $matches['nsname'][$i]) .'\\';
                
                else
                {
                    $name = $matches['name'][$i];

                    if ($name == 'extends' || $name == 'implements')
                        continue;

                    $classes[] = ltrim ($namespace . $name, '\\');
                }
            }

            return $classes;
        }
    }
}
